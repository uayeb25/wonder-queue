"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const UUID = require("uuid");
var TokenBase;
(function (TokenBase) {
    TokenBase["BASE16"] = "0123456789abcdef";
    TokenBase["BASE36"] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    TokenBase["BASE58"] = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
    TokenBase["BASE62"] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    TokenBase["BASE66"] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~";
    TokenBase["BASE71"] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!'()*-._~";
})(TokenBase = exports.TokenBase || (exports.TokenBase = {}));
class TokenGenerator {
    constructor(dto = {}) {
        this._bitSize = dto.bitSize || 128;
        this._baseEncoding = dto.baseEncoding || TokenBase.BASE58;
        if (this._bitSize % 128 !== 0 || this._bitSize < 0) {
            throw new Error('bitSize must be a positive integer that is a multiple of 128');
        }
        if (typeof this._baseEncoding !== 'string') {
            throw new Error('baseEncoding must be a string');
        }
        this._base = this._baseEncoding.length;
        this._tokenLength = Math.ceil(this._bitSize / Math.log2(this._base));
        this._bytes = this._bitSize / 8;
    }
    generate() {
        const buffer = Buffer.allocUnsafe(this._bytes);
        let i;
        for (i = 0; i < this._bytes; i += 16) {
            UUID.v4(null, buffer, i);
        }
        if (this._baseEncoding === TokenBase.BASE16) {
            return buffer.toString('hex');
        }
        const digits = [0];
        for (i = 0; i < buffer.length; ++i) {
            let carry = buffer[i];
            for (let j = 0; j < digits.length; ++j) {
                // tslint:disable-next-line:no-bitwise
                carry += digits[j] << 8;
                digits[j] = carry % this._base;
                // tslint:disable-next-line:no-bitwise
                carry = (carry / this._base) | 0;
            }
            while (carry > 0) {
                digits.push(carry % this._base);
                // tslint:disable-next-line:no-bitwise
                carry = (carry / this._base) | 0;
            }
        }
        let token = digits.length < this._tokenLength
            ? this._baseEncoding[0].repeat(this._tokenLength - digits.length) // Leading zeros
            : '';
        i = digits.length;
        while (i--) {
            token += this._baseEncoding[digits[i]];
        }
        return token;
    }
}
exports.TokenGenerator = TokenGenerator;
//# sourceMappingURL=token-generator.js.map